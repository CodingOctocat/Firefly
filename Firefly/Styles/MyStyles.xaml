<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:b="clr-namespace:Firefly.Behaviors"
                    xmlns:c="clr-namespace:Firefly.Controls"
                    xmlns:hc="https://handyorg.github.io/handycontrol"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib">

    <!--
        HandyControl.ThirdlyTextBrush 控制 hc:InfoElement.Placeholder 的颜色
        但是太淡了，这里覆盖提升为 SecondaryTextColor
    -->
    <SolidColorBrush x:Key="ThirdlyTextBrush"
                     Color="{DynamicResource SecondaryTextColor}" />

    <Style x:Key="MySimpleTextStyle"
           TargetType="{x:Type hc:SimpleText}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
    </Style>

    <Style x:Key="LabelBorderStyle"
           BasedOn="{StaticResource BorderCircular}"
           TargetType="{x:Type Border}">
        <Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="8,2" />
    </Style>

    <Style x:Key="ElementButton"
           BasedOn="{StaticResource ButtonDefault}"
           TargetType="{x:Type Button}">
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="Padding" Value="8" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
    </Style>

    <Style x:Key="LeftTitleTextBoxStyle"
           BasedOn="{StaticResource TextBoxPlusBaseStyle}"
           TargetType="{x:Type hc:TextBox}">
        <Setter Property="b:TripleClickToSelectAllBehavior.IsEnabled" Value="True" />
        <Setter Property="hc:TitleElement.TitlePlacement" Value="Left" />
    </Style>

    <Style x:Key="ReadOnlyLeftTitleTextBoxStyle"
           BasedOn="{StaticResource LeftTitleTextBoxStyle}"
           TargetType="{x:Type hc:TextBox}">
        <Setter Property="IsReadOnly" Value="True" />
    </Style>

    <Style x:Key="LeftTitleClearableTextBoxStyle"
           BasedOn="{StaticResource TextBoxPlusBaseStyle}"
           TargetType="{x:Type hc:TextBox}">
        <Setter Property="b:TripleClickToSelectAllBehavior.IsEnabled" Value="True" />
        <Setter Property="hc:InfoElement.ShowClearButton" Value="True" />
        <Setter Property="hc:TitleElement.TitlePlacement" Value="Left" />
    </Style>

    <Style x:Key="SplitButtonDropDownMenuStyle"
           BasedOn="{StaticResource MenuBaseStyle}"
           TargetType="{x:Type Menu}">
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <VirtualizingStackPanel IsItemsHost="True"
                                            Orientation="Vertical" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="IconImageStyle"
           TargetType="{x:Type Image}">
        <Setter Property="Height" Value="16" />
        <Setter Property="RenderOptions.BitmapScalingMode" Value="HighQuality" />
        <Setter Property="Width" Value="16" />
    </Style>

    <Style x:Key="IconImageStyle.Small"
           BasedOn="{StaticResource IconImageStyle}"
           TargetType="{x:Type Image}">
        <Setter Property="Height" Value="14" />
        <Setter Property="Width" Value="14" />
    </Style>

    <Style x:Key="IconImageStyle.Tiny"
           BasedOn="{StaticResource IconImageStyle}"
           TargetType="{x:Type Image}">
        <Setter Property="Height" Value="12" />
        <Setter Property="Width" Value="12" />
    </Style>

    <Style x:Key="IconViewBoxStyle"
           TargetType="{x:Type Viewbox}">
        <Setter Property="Height" Value="16" />
        <Setter Property="Width" Value="16" />
    </Style>

    <Style x:Key="IconViewBoxStyle.Small"
           BasedOn="{StaticResource IconViewBoxStyle}"
           TargetType="{x:Type Viewbox}">
        <Setter Property="Height" Value="14" />
        <Setter Property="Width" Value="14" />
    </Style>

    <Style x:Key="IconViewBoxStyle.Tiny"
           BasedOn="{StaticResource IconViewBoxStyle}"
           TargetType="{x:Type Viewbox}">
        <Setter Property="Height" Value="12" />
        <Setter Property="Width" Value="12" />
    </Style>

    <Style x:Key="IconParkStyle.TitleBar"
           TargetType="{x:Type Path}">
        <Setter Property="Fill" Value="{DynamicResource LightPrimaryBrush}" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Stretch" Value="Uniform" />
        <Setter Property="Stroke" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="StrokeEndLineCap" Value="Round" />
        <Setter Property="StrokeLineJoin" Value="Round" />
        <Setter Property="StrokeStartLineCap" Value="Round" />
        <Setter Property="StrokeThickness" Value="2" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>

    <Style x:Key="IconParkStyle"
           TargetType="{x:Type Path}">
        <Setter Property="Fill" Value="{DynamicResource MyLightPrimaryBrush}" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Stretch" Value="Uniform" />
        <Setter Property="Stroke" Value="{DynamicResource ReverseTextBrush}" />
        <Setter Property="StrokeEndLineCap" Value="Round" />
        <Setter Property="StrokeLineJoin" Value="Round" />
        <Setter Property="StrokeStartLineCap" Value="Round" />
        <Setter Property="StrokeThickness" Value="2" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>

    <Style x:Key="HGridSplitterStyle"
           TargetType="{x:Type GridSplitter}">
        <Style.Resources>
            <Style TargetType="{x:Type Border}">
                <Setter Property="CornerRadius" Value="2" />
            </Style>
        </Style.Resources>

        <Setter Property="BorderThickness" Value="0,2" />
        <Setter Property="Height" Value="8" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="ResizeBehavior" Value="PreviousAndNext" />
    </Style>

    <Style x:Key="VGridSplitterStyle"
           TargetType="{x:Type GridSplitter}">
        <Style.Resources>
            <Style TargetType="{x:Type Border}">
                <Setter Property="CornerRadius" Value="2" />
            </Style>
        </Style.Resources>

        <Setter Property="BorderThickness" Value="2,0" />
        <Setter Property="ResizeBehavior" Value="PreviousAndNext" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="Width" Value="8" />
    </Style>

    <Style x:Key="MyComboBoxItemStyle"
           BasedOn="{StaticResource ComboBoxItemBaseStyle}"
           TargetType="{x:Type ComboBoxItem}">
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
    </Style>

    <!--  全局样式  -->

    <Style BasedOn="{StaticResource TextBoxBaseStyle}"
           TargetType="{x:Type hc:TextBox}">
        <Setter Property="ContextMenu" Value="{StaticResource InputElementContextMenu}" />
    </Style>

    <Style BasedOn="{StaticResource NumericUpDownBaseStyle}"
           TargetType="{x:Type hc:NumericUpDown}">
        <Setter Property="b:InputElementContextMenuBehavior.UseCustomStyle" Value="True" />
    </Style>

    <!--  当字体设置为英文字体时，中文会以类似日本汉字的风格显示，而 hc:SimpleText 则使用系统默认字体（Microsoft YaHei）  -->
    <Style TargetType="{x:Type hc:SimpleText}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
    </Style>

    <Style BasedOn="{StaticResource {x:Type Window}}"
           TargetType="{x:Type Window}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Window}">
                    <Grid Background="{TemplateBinding Background}">
                        <AdornerDecorator>
                            <ContentPresenter />
                        </AdornerDecorator>

                        <ResizeGrip x:Name="WindowResizeGrip"
                                    HorizontalAlignment="Right"
                                    VerticalAlignment="Bottom"
                                    IsTabStop="False"
                                    Visibility="Collapsed" />
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="ResizeMode" Value="CanResizeWithGrip">
                            <Setter TargetName="WindowResizeGrip" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type GridSplitter}">
        <Style.Resources>
            <Style TargetType="{x:Type Border}">
                <Setter Property="CornerRadius" Value="2" />
            </Style>
        </Style.Resources>

        <Setter Property="BorderBrush" Value="Transparent" />
    </Style>

    <!--<Style BasedOn="{StaticResource ComboBoxPlusBaseStyle}"
           TargetType="{x:Type c:ReadOnlyComboBox}">
        <Setter Property="ItemContainerStyle" Value="{StaticResource MyComboBoxItemStyle}" />
        <Setter Property="ShowClearButton" Value="{Binding IsReadOnly, RelativeSource={RelativeSource Self}, Converter={StaticResource Boolean2BooleanReConverter}}" />
        <Setter Property="Template" Value="{StaticResource ComboBoxEditableLeftTemplate}" />
    -->
    <!--  修复光标悬停在此控件边缘时，控件快速闪烁的问题  -->
    <!--
        <Setter Property="UseLayoutRounding" Value="False" />

        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <hc:SimpleStackPanel>
                        <AdornedElementPlaceholder />
    -->
    <!--  修复 HandyControl 无法去除验证错误信息的问题，可用一个 Border 覆盖，或重写 VerifyData 方法，清空 ErrorStr 内容  -->
    <!--<Border Background="{StaticResource BackgroundBrush}" Height="4" />-->
    <!--
                    </hc:SimpleStackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="hc:TitleElement.TitlePlacement" Value="Left" />

        <Style.Triggers>
            <Trigger Property="IsError" Value="True">
                <Setter Property="BorderBrush" Value="{StaticResource DangerBrush}" />
    -->
    <!--  设置 ErrorStr 无效，需要在 VerifyData 方法中重写  -->
    <!--<Setter Property="ErrorStr" Value="" />-->
    <!--
                <Setter Property="ToolTip" Value="{Binding (Validation.Errors), RelativeSource={RelativeSource Self}, Converter={StaticResource ValidationErrorsToolTipConverter}}" />
            </Trigger>
        </Style.Triggers>
    </Style>-->

    <Style BasedOn="{StaticResource GotoTopBaseStyle}"
           TargetType="{x:Type hc:GotoTop}">
        <Setter Property="Background" Value="{DynamicResource LightPrimaryBrush}" />
        <Setter Property="Height" Value="36" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="Margin" Value="0,0,16,16" />
        <Setter Property="Opacity" Value="0.5" />
        <Setter Property="Padding" Value="12" />
        <Setter Property="VerticalAlignment" Value="Bottom" />
        <Setter Property="Width" Value="36" />
    </Style>

    <Style BasedOn="{StaticResource StatusBarItemBaseStyle}"
           TargetType="{x:Type StatusBarItem}">
        <Setter Property="Padding" Value="10,4" />
    </Style>

    <Style BasedOn="{StaticResource EmptyBaseStyle}"
           TargetType="{x:Type hc:Empty}">
        <Setter Property="Padding" Value="10,8" />
        <Setter Property="hc:BorderElement.CornerRadius" Value="8" />
    </Style>

    <!--  定义一些资源  -->

    <Viewbox x:Key="CheckBoxIcon"
             x:Shared="False"
             Style="{StaticResource IconViewBoxStyle.Small}">
        <Path Data="{StaticResource SquareGeometry}"
              Fill="White"
              Stroke="{DynamicResource BorderBrush}"
              Style="{StaticResource IconParkStyle}" />
    </Viewbox>

    <Viewbox x:Key="SearchIcon"
             x:Shared="False"
             Style="{StaticResource IconViewBoxStyle.Small}">
        <Path Data="{StaticResource SearchGeometry}"
              Fill="{DynamicResource MyReverseBrush}"
              Style="{StaticResource IconParkStyle}" />
    </Viewbox>

    <Image x:Key="FindInPageIcon"
           x:Shared="False"
           Source="{DynamicResource find_in_page}" />

    <ContextMenu x:Key="InputElementContextMenu">
        <MenuItem Command="{x:Static ApplicationCommands.Cut}"
                  CommandTarget="{Binding PlacementTarget, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"
                  Header="剪切" />

        <MenuItem Command="{x:Static ApplicationCommands.Copy}"
                  CommandTarget="{Binding PlacementTarget, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"
                  Header="复制" />

        <MenuItem Command="{x:Static ApplicationCommands.Paste}"
                  CommandTarget="{Binding PlacementTarget, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"
                  Header="粘贴" />
    </ContextMenu>

</ResourceDictionary>
